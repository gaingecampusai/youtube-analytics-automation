name: Deploy YouTube Analytics to Cloud Run

on:
  push:
    branches: [ main, master ]
    paths:
      - 'channel_analytics/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PROJECT_ID: chanel-analytics
  REGION: asia-northeast3
  JOB_NAME: yt-monthly-job
  IMAGE_NAME: yt-monthly

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Enable APIs
      run: |
        gcloud services enable \
          run.googleapis.com \
          artifactregistry.googleapis.com \
          cloudbuild.googleapis.com \
          secretmanager.googleapis.com \
          cloudscheduler.googleapis.com \
          youtube.googleapis.com \
          youtubeanalytics.googleapis.com \
          sheets.googleapis.com

    - name: Create Artifact Registry
      run: |
        gcloud artifacts repositories create yt-repo \
          --repository-format=docker --location=${{ env.REGION }} \
          --description="YT monthly repo" 2>/dev/null || true

    - name: Upload Secrets
      run: |
        # Create secrets if they don't exist
        gcloud secrets create yt_client_secret --replication-policy="automatic" 2>/dev/null || true
        gcloud secrets create yt_token_youtube --replication-policy="automatic" 2>/dev/null || true
        gcloud secrets create yt_token_sheets --replication-policy="automatic" 2>/dev/null || true
        
        # Upload secret versions
        echo '${{ secrets.CLIENT_SECRET_JSON }}' | gcloud secrets versions add yt_client_secret --data-file=-
        echo '${{ secrets.TOKEN_YOUTUBE_JSON }}' | gcloud secrets versions add yt_token_youtube --data-file=-
        echo '${{ secrets.TOKEN_SHEETS_JSON }}' | gcloud secrets versions add yt_token_sheets --data-file=-

    - name: Create Service Account
      run: |
        gcloud iam service-accounts create run-job-sa --display-name "Cloud Run Job SA" 2>/dev/null || true
        
        # Grant secret access
        gcloud secrets add-iam-policy-binding yt_client_secret \
          --member="serviceAccount:run-job-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor" >/dev/null
        gcloud secrets add-iam-policy-binding yt_token_youtube \
          --member="serviceAccount:run-job-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor" >/dev/null
        gcloud secrets add-iam-policy-binding yt_token_sheets \
          --member="serviceAccount:run-job-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor" >/dev/null

    - name: Build and Push Docker Image
      run: |
        cd channel_analytics
        gcloud builds submit --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/yt-repo/${{ env.IMAGE_NAME }}:latest .

    - name: Deploy to Cloud Run
      run: |
        # Delete existing job if it exists
        gcloud run jobs delete ${{ env.JOB_NAME }} --region=${{ env.REGION }} --quiet 2>/dev/null || true
        
        # Create new job
        gcloud run jobs create ${{ env.JOB_NAME }} \
          --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/yt-repo/${{ env.IMAGE_NAME }}:latest \
          --region ${{ env.REGION }} \
          --service-account run-job-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --set-env-vars "ENV=cloud,NON_INTERACTIVE=true,USE_DUAL_TOKENS=true" \
          --set-secrets "/secrets/client_secret.json=yt_client_secret:latest,/secrets/token_youtube.json=yt_token_youtube:latest,/secrets/token_sheets.json=yt_token_sheets:latest" \
          --max-retries=1 --tasks=1 --task-timeout=1800s

    - name: Create Cloud Scheduler
      run: |
        # Create scheduler service account
        gcloud iam service-accounts create scheduler-invoker --display-name "Scheduler Invoker" 2>/dev/null || true
        gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
          --member="serviceAccount:scheduler-invoker@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/run.invoker" >/dev/null

        # Create or update scheduler job
        JOB_URI="https://${{ env.REGION }}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ env.PROJECT_ID }}/jobs/${{ env.JOB_NAME }}:run"
        
        gcloud scheduler jobs create http yt-monthly-schedule \
          --schedule="0 2 1 * *" --time-zone="Asia/Seoul" \
          --http-method=POST --uri="$JOB_URI" \
          --oauth-service-account-email="scheduler-invoker@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --oauth-token-audience="https://${{ env.REGION }}-run.googleapis.com/" 2>/dev/null || \
        gcloud scheduler jobs update http yt-monthly-schedule \
          --schedule="0 2 1 * *" --time-zone="Asia/Seoul" \
          --http-method=POST --uri="$JOB_URI" \
          --oauth-service-account-email="scheduler-invoker@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --oauth-token-audience="https://${{ env.REGION }}-run.googleapis.com/"

    - name: Test Deployment
      run: |
        echo "Testing deployment..."
        gcloud run jobs execute ${{ env.JOB_NAME }} --region=${{ env.REGION }} --wait

    - name: Deployment Summary
      run: |
        echo "✅ Deployment completed successfully!"
        echo "📊 Job Name: ${{ env.JOB_NAME }}"
        echo "🌍 Region: ${{ env.REGION }}"
        echo "📅 Schedule: 매월 1일 02:00 (한국 시간)"
        echo "🔗 Job URL: https://console.cloud.google.com/run/jobs/${{ env.JOB_NAME }}?project=${{ env.PROJECT_ID }}&region=${{ env.REGION }}"
